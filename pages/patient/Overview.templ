package pages_patient

import (
	"errors"
	"github.com/PotatoEMR/PotatoEMR/pages"
	r4 "github.com/PotatoEMR/simple-fhir-client/r4"
	r4Client "github.com/PotatoEMR/simple-fhir-client/r4Client"

	"fmt"
	"net/http"
	"strconv"
)

func Overview(w http.ResponseWriter, req *http.Request) {
	patId := req.PathValue("patId")
	patEverything, err := Client.PatientEverythingGrouped(patId)
	ctBundle, err2 := Client.SearchGrouped(r4Client.SpCareTeam{Patient: patId})
	vitalsByCode := make(map[string]r4.Observation)
	for _, obs := range patEverything.Observations {
		for _, vitalSignsCode := range r4.VSObservation_vitalsignresult {
			codeString := *vitalSignsCode.Code
			if len(obs.Code.Coding) != 0 && obs.Code.Coding[0].Code != nil && *obs.Code.Coding[0].Code == codeString {
				vitalsByCode[codeString] = *obs
			}
		}
	}
	fmt.Println("map", vitalsByCode)

	if err != nil || err2 != nil {
		pages.ErrorMsg(err).Render(req.Context(), w)
	} else if len(patEverything.Patients) != 1 {
		pages.ErrorMsg(errors.New("Patient id "+patId+" not found on server "+Client.BaseUrl)).Render(req.Context(), w)
	} else {
		pat := patEverything.Patients[0]
		T_Overview(pat, patEverything, ctBundle.CareTeams).Render(req.Context(), w)
	}
}

templ OverviewCard(cardName, color string) {
	<div style={ "border: 5px solid " + color + "; border-radius: 4px; margin: 8px; padding: 8px; width: 350px; word-wrap: break-word; overflow-wrap: break-word;" }>
		<div style="display: inline-block; margin-top: 8px; margin-bottom: 16px;">
			<span style={ "background-color: " + color + "; border-radius: 4px; padding: 8px; color: black;" }>{ cardName }</span>
		</div>
		{ children... }
	</div>
}

// patient page idk
templ T_Overview(pat *r4.Patient, patEverything *r4Client.ResourceGroup, patCareTeams []*r4.CareTeam) {
	@Base_Patient(pat, patEverything, TabOverview) {
		<h3>Overview</h3>
		//would really prefer masonry layout https://masonry.desandro.com/ but no css way, needs js for layout
		<div style="display: flex; flex-wrap: wrap;">
			@OverviewCard("Patient Info", "#1cdfed") {
				<p>{ "Name: " + pat.String() }</p>
				<div>
					if pat.BirthDate != nil {
						<p>Birthday: { (*pat.BirthDate).Format("January 2, 2006") }</p>
					} else {
						<p>Birthday: N/A</p>
					}
					<div>
						<span>Address:</span>
						for _, addr := range pat.Address {
							<span>{ addr.String() }</span>
						}
						if len(pat.Address) == 0 {
							<span>None</span>
						}
					</div>
				</div>
			}
			@OverviewCard("Treatment Team", "#ff8f76") {
				<div>
					<span>General Practitioner: </span>
					if len(pat.GeneralPractitioner) == 0 {
						<span>N/A</span>
					} else {
						for i, gp := range pat.GeneralPractitioner {
							if i != 0 {
								<span>, </span>
							}
							<span>{ gp.String() }</span>
						}
					}
				</div>
				<div>
					if len(patCareTeams) == 0 {
						<p>Care Teams: N/A</p>
					} else {
						<p>Care Teams:</p>
						for i, ct := range patCareTeams {
							<div>
								if ct.Name != nil {
									<span>{ *ct.Name + ":" }</span>
								} else {
									<span>{ "Care Team " + strconv.Itoa(i) + ":" }</span>
								}
								if len(ct.Participant) == 0 {
									<span>no members found</span>
								}
								for i, part := range ct.Participant {
									if i != 0 {
										<span>,</span>
									}
									{{ fmt.Println(part.Member.Id) }}
									<span>{ part.Member.String() }</span>
								}
							</div>
						}
					}
				</div>
			}
			@OverviewCard("Vital Signs", "#a288e3") {
				<div>
					for _, obs := range patEverything.Observations {
						<p>{ obs.Code.String() }</p>
					}
					<p>idk</p>
				</div>
			}
			@OverviewCard("Care Plan Problems/Goals", "#bbd5ed") {
				<div>
					<p>idk</p>
				</div>
			}
			@OverviewCard("Work List Tasks", "#98ff98") {
				<div>
					<p>idk</p>
				</div>
			}
		</div>
	}
}
