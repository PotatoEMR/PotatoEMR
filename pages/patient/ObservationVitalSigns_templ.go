// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package pages_patient

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"encoding/json"
	"errors"
	"github.com/PotatoEMR/PotatoEMR/pages"
	"github.com/PotatoEMR/PotatoEMR/utils"
	r4 "github.com/PotatoEMR/simple-fhir-client/r4"
	r4Client "github.com/PotatoEMR/simple-fhir-client/r4Client"
	"slices"

	"fmt"
	"net/http"
)

// https://build.fhir.org/observation-vitalsigns.html
func ObservationVitalSigns(w http.ResponseWriter, req *http.Request) {
	patId := req.PathValue("patId")
	patEverything, err := Client.PatientEverythingGrouped(patId)
	//map of observation time collected -> observation vital code -> observation
	//so we can create a spreadsheet ish thing
	//with a column of vitals collected at a given time
	//that has a row for each obs in vital signs panel
	vitalsByTimeAndCode := make(map[string]map[string]r4.Observation)
	for _, obs := range patEverything.Observations {
		obsTime, obsTimeErr := utils.ObservationTime(obs)
		if obsTimeErr == nil {
			for _, vitalSignsCode := range r4.VSObservation_vitalsignresult {
				for _, coding := range obs.Code.Coding {
					if coding.Code != nil && *coding.Code == *vitalSignsCode.Code {
						if vitalsByTimeAndCode[*obsTime] == nil {
							//might think this could go in higher loop, but we want the outer time map to only have times for vital sign observations
							//observation could be a normal observation with some other code, in which case doesn't make time -> code map
							vitalsByTimeAndCode[*obsTime] = make(map[string]r4.Observation)
						}
						vitalsByTimeAndCode[*obsTime][*vitalSignsCode.Code] = *obs
					}
				}
			}
		}
	}

	if err != nil {
		pages.ErrorMsg(err).Render(req.Context(), w)
		return
	}
	if len(patEverything.Patients) != 1 {
		pages.ErrorMsg(errors.New("Patient id "+patId+" not found on server "+Client.BaseUrl)).Render(req.Context(), w)
		return
	}
	pat := patEverything.Patients[0]
	if pat.Id == nil || *pat.Id != patId {
		pages.ErrorMsg(errors.New("Server returned patient without id "+patId)).Render(req.Context(), w)
		return
	}
	T_ObservationVitalSigns(pat, patEverything, vitalsByTimeAndCode).Render(req.Context(), w)
}

func ObservationVitalSignsCreate(w http.ResponseWriter, req *http.Request) {
	patId := req.PathValue("patId")
	fmt.Println("vsc", patId)
	var observations map[string]string
	if err := json.NewDecoder(req.Body).Decode(&observations); err != nil {
		pages.ErrorMsg(errors.New("failed to unmarshal observation json")).Render(req.Context(), w)
		return
	}
	time, err := utils.ParseHTMLDateTimeLocal(observations["time"])
	if err != nil {
		pages.ErrorMsg(errors.New("failed to parse observation time "+err.Error())).Render(req.Context(), w)
		return
	}
	obsTime := r4.FhirDateTime{time}
	loincSystem := "HMMM"
	for _, codeAndName := range codeAndNames {
		obs, ok := observations[codeAndName.name]
		if ok {
			obsCoding := r4.Coding{Code: &codeAndName.name, System: &loincSystem}
			obsCodeableConcept := r4.CodeableConcept{Coding: []r4.Coding{obsCoding}}
			newObs := r4.Observation{EffectiveDateTime: &obsTime, ValueString: &obs, Code: obsCodeableConcept}
			fmt.Println(newObs)
		}
	}
	ObservationVitalSigns(w, req)
}

type codeAndName struct {
	code string
	name string
}

var codeAndNames = []codeAndName{
	{code: "29463-7", name: "Body weight"},
	{code: "8302-2", name: "Body height"},
	{code: "9843-4", name: "Head circumference"},
	{code: "39156-5", name: "Body mass index"},
	{code: "9279-1", name: "Respiratory Rate"},
	{code: "8867-4", name: "Heart rate"},
	{code: "2708-6", name: "Oxygen saturation"},
	{code: "8310-5", name: "Body temperature"},
	{code: "85354-9", name: "Blood pressure systolic and diastolic"},
	{code: "8480-6", name: "Systolic blood pressure"},
	{code: "8462-4", name: "Diastolic blood pressure"},
}

func T_ObservationVitalSigns(pat *r4.Patient, patEverything *r4Client.ResourceGroup, vitalsByTimeAndCode map[string]map[string]r4.Observation) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h3>Vital Signs</h3><style>\n\t\ttable {\n\t\tborder-collapse: collapse;\n\t\t}\n\t\tth, td {\n\t\t\ttext-align: start;\n\t\tborder: 1px solid black;\n\t\tpadding: 5px;\n\t\t}\n\t\t</style> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}

			timeKeys := make([]string, 0)
			for k, _ := range vitalsByTimeAndCode {
				timeKeys = append(timeKeys, k)
			}
			slices.Sort(timeKeys)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<form id=\"vitalsForm\" hx-post=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs("/patient/" + *pat.Id + "/vitalsigns/create/")
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pages/patient/ObservationVitalSigns.templ`, Line: 127, Col: 58}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" hx-target=\"body\" hx-ext=\"form-json\" hx-push-url=\"false\" hx-indicator=\"#vitalsForm\" class=\"htmx-indicator\"><div style=\"width: fit-content;\"><table><tr><th>Time</th>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, k := range timeKeys {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(k)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pages/patient/ObservationVitalSigns.templ`, Line: 139, Col: 14}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<td><input name=\"time\" required type=\"datetime-local\"></td></tr>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, codeAndName := range codeAndNames {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<tr><td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var5 string
				templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(codeAndName.name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pages/patient/ObservationVitalSigns.templ`, Line: 145, Col: 29}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				for _, timeKey := range timeKeys {
					obs, ok := vitalsByTimeAndCode[timeKey][codeAndName.code]
					if ok {
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<td>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						var templ_7745c5c3_Var6 string
						templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(utils.ObservationValueString(&obs))
						if templ_7745c5c3_Err != nil {
							return templ.Error{Err: templ_7745c5c3_Err, FileName: `pages/patient/ObservationVitalSigns.templ`, Line: 149, Col: 49}
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</td>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					} else {
						templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<td></td>")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<td><input name=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(codeAndName.name)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `pages/patient/ObservationVitalSigns.templ`, Line: 154, Col: 41}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"></td></tr>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</table><div style=\"text-align: right; margin-top: 2px;\"><button type=\"submit\">Save New Vitals Panel</button></div></div></form>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base_Patient(pat, patEverything, TabVitalSigns).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
