package pages_patient

import "github.com/PotatoEMR/PotatoEMR/pages"
import "github.com/PotatoEMR/simple-fhir-client/r4Client"
import "github.com/PotatoEMR/simple-fhir-client/r4"
import "github.com/PotatoEMR/PotatoEMR/utils"

//all patient specific pages use base_patient for patient sidebar
//and links to pages for the particular patient
templ Base_Patient(pat *r4.Patient, patEverything *r4Client.ResourceGroup, currentTab Tab) {
	@pages.Base_Nav() {
		<div style="height: 100%; display: flex;">
			<nav
				hx-boost="true"
				hx-indicator="#patient-content"
				id="patient-sidebar"
				class="color-color2"
				style="height: 100%; padding: 4px; width: 200px; min-width: 200px; box-sizing: border-box; overflow-y: auto; overflow-wrap: break-word; border-right-width: 2px; border-right-style: solid;"
			>
				{{ photoSrc := utils.GetPatientPhotoSrc(pat) }}
				if photoSrc == nil {
					<svg width="150px" height="150px" viewBox="0 0 150 150" alt="Patient Photo" style="margin: auto; display: block; border-radius: 5px;">
						<path fill="#ccc" d="M 104.68731,56.689353 C 102.19435,80.640493 93.104981,97.26875 74.372196,97.26875 55.639402,97.26875 46.988823,82.308034 44.057005,57.289941 41.623314,34.938838 55.639402,15.800152 74.372196,15.800152 c 18.732785,0 32.451944,18.493971 30.315114,40.889201 z"></path>
						<path fill="#ccc" d="M 92.5675 89.6048 C 90.79484 93.47893 89.39893 102.4504 94.86478 106.9039 C 103.9375 114.2963 106.7064 116.4723 118.3117 118.9462 C 144.0432 124.4314 141.6492 138.1543 146.5244 149.2206 L 4.268444 149.1023 C 8.472223 138.6518 6.505799 124.7812 32.40051 118.387 C 41.80992 116.0635 45.66513 113.8823 53.58659 107.0158 C 58.52744 102.7329 57.52583 93.99267 56.43084 89.26926 C 52.49275 88.83011 94.1739 88.14054 92.5675 89.6048 z"></path>
					</svg>
				} else {
					<img src={ *photoSrc } alt="Patient Photo" style="width: 150px; height: 150px; margin: auto; display: block; object-fit: contain; border-radius: 5px;"/>
				}
				<p>{ pat.String() }</p>
				<p>{ *pat.BirthDate }</p>
				<p>MRN: { *pat.Id }</p>
				<div>
					<p>Problem List:</p>
					for _, condition := range patEverything.Conditions {
						<p>{ condition.Code.String() }</p>
					}
				</div>
				<div>
					<p>Allergies:</p>
					for _, allergy := range patEverything.AllergyIntolerances {
						<p>{ allergy.Code.String() }</p>
					}
				</div>
				<div>
					<p>Medications:</p>
					for _, med := range patEverything.Medications {
						<p>{ med.Code.String() }</p>
					}
				</div>
				<div>
					<p>Observations:</p>
					for _, obs := range patEverything.Observations {
						<p>{ obs.Code.String() }</p>
					}
				</div>
				<div>
					<p>Observations:</p>
					for _, obs := range patEverything.Observations {
						<p>{ obs.Code.String() + ": " + utils.ObservationValueString(obs) }</p>
					}
				</div>
				<div>
					<p>Notes:</p>
					for _, dr := range patEverything.DocumentReferences {
						<p>author { *dr.Author[0].Display }</p>
						for _, content := range dr.Content {
							<p>{ *content.Attachment.Title } { *content.Attachment.Creation }</p>
						}
					}
				</div>
			</nav>
			<div style="flex: 1; display: flex; flex-direction: column; height: 100%;">
				<nav
					hx-boost="true"
					hx-indicator="#patient-content"
					id="patient-nav"
					class="color-color2"
					style="padding-left: 2px; display: flex; position: relative; border-bottom-width: 2px; border-bottom-style: solid; line-height: 1.2em;"
				>
					for tabNum, tabLabel := range tabLabels {
						if int(currentTab) == tabNum {
							<a
								class="color-color3"
								style="margin-top: 2px; margin-bottom: -2px; border-radius: 12px 12px 0 0; border-width: 2px; border-style: solid; border-bottom: 0px; padding: 2px;"
								href={ "/patient/" + *pat.Id + "/" + tabLinks[tabNum] }
							>{ tabLabel }</a>
						} else {
							<a
								class="color-color2-hover"
								style="padding: 4px; padding-top: 6px;"
								href={ "/patient/" + *pat.Id + "/" + tabLinks[tabNum] }
							>{ tabLabel }</a>
						}
					}
				</nav>
				<div style="padding: 8px; flex: 1; min-height: 0;">
					<div
						id="patient-content"
						class="htmx-indicator color-color3"
						style="height: 100%; overflow: auto;"
					>
						{ children... }
					</div>
				</div>
			</div>
		</div>
	}
}

//list of tabs, each patient page passes currentTab to base patient page
//so base patient can highlight that tab

type Tab int

const (
	TabOverview Tab = iota
	TabDemographics
	TabAllergies
	TabMedications
	TabImmunizationHistory
)

var tabLabels = []string{
	"Overview",
	"Demographics",
	"Allergies",
	"Medications",
	"Immunization History",
}

var tabLinks = []string{
	"overview",
	"demographics",
	"allergies",
	"medications",
	"immunizations",
}
