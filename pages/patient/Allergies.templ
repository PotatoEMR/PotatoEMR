package pages_patient

import (
	"github.com/PotatoEMR/PotatoEMR/pages"
	r4 "github.com/PotatoEMR/simple-fhir-client/r4"
	r4Client "github.com/PotatoEMR/simple-fhir-client/r4Client"

	"encoding/json"
	"fmt"
	"net/http"
)

func Allergies(w http.ResponseWriter, req *http.Request) {
	patId := req.PathValue("patId")
	client := r4Client.New("r4.smarthealthit.org/")
	patEverything, err := client.PatientEverythingGrouped(patId)

	if err != nil {
		pages.ErrorMsg(err).Render(req.Context(), w)
	} else if len(patEverything.Patients) != 1 {
		pages.ErrorMsg(fmt.Errorf("patient list should be len 1, is %d", len(patEverything.Patients))).Render(req.Context(), w)
	} else {
		pat := patEverything.Patients[0]
		T_Allergies(pat, patEverything).Render(req.Context(), w)
	}
}

func AllergiesCreate(w http.ResponseWriter, req *http.Request) {
	fmt.Println("Create")
	err := req.ParseForm()
	if err != nil {
		fmt.Println("error parsing form idk")
		return
	}

	for key, values := range req.Form {
		fmt.Println(key, values)
	}
	aD := req.FormValue("AllergyIntolerance.Code.coding[0].display")
	aS := req.FormValue("AllergyIntolerance.Code.coding[0].system")
	aC := req.FormValue("AllergyIntolerance.Code.coding[0].code")
	aCC := r4.CodeableConcept{Coding: []r4.Coding{r4.Coding{System: &aS, Code: &aC, Display: &aD}}}
	criticality := req.FormValue("AllergyIntolerance.Criticality")
	vsD := req.FormValue("AllergyIntolerance.VerificationStatus.coding[0].display")
	vsS := req.FormValue("AllergyIntolerance.VerificationStatus.coding[0].system")
	vsC := req.FormValue("AllergyIntolerance.VerificationStatus.coding[0].code")
	vs := r4.CodeableConcept{Coding: []r4.Coding{r4.Coding{System: &vsS, Code: &vsC, Display: &vsD}}}
	csD := req.FormValue("AllergyIntolerance.ClinicalStatus.coding[0].display")
	csS := req.FormValue("AllergyIntolerance.ClinicalStatus.coding[0].system")
	csC := req.FormValue("AllergyIntolerance.ClinicalStatus.coding[0].code")
	cs := r4.CodeableConcept{Coding: []r4.Coding{r4.Coding{System: &csS, Code: &csC, Display: &csD}}}
	patId := req.PathValue("patId")
	refPat := r4.Patient{Id: &patId}
	allergy := r4.AllergyIntolerance{Criticality: &criticality, Patient: refPat.ToRef(), VerificationStatus: &vs, ClinicalStatus: &cs, Code: &aCC}
	client := r4Client.New("r4.smarthealthit.org/")
	test, err := client.CreateAllergyIntolerance(&allergy)
	j, _ := json.Marshal(test)
	fmt.Println(string(j))
	if err != nil {
		fmt.Println("error creating allergy", err)
	}

	w.Header().Set("HX-Retarget", "body")
	Allergies(w, req)
}

func AllergiesUpdate(w http.ResponseWriter, req *http.Request) {
	allergyId := req.PathValue("allergyId")
	client := r4Client.New("r4.smarthealthit.org/")
	a, _ := client.ReadAllergyIntolerance(allergyId)

	// body, err := io.ReadAll(req.Body)
	// if err != nil {
	// 	http.Error(w, err.Error(), http.StatusInternalServerError)
	// 	return
	// }
	// defer req.Body.Close()
	// fmt.Println(string(body))

	var data r4.AllergyIntolerance
	if err := json.NewDecoder(req.Body).Decode(&data); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer req.Body.Close()
	j, _ := json.Marshal(data)
	fmt.Println(string(j))

	a.Type = data.Type

	client.UpdateAllergyIntolerance(a)
	w.Header().Set("HX-Retarget", "body")
	Allergies(w, req)
}

func AllergiesDelete(w http.ResponseWriter, req *http.Request) {
	allergyId := req.PathValue("allergyId")
	client := r4Client.New("r4.smarthealthit.org/")
	client.DeleteAllergyIntoleranceById(allergyId)
	w.Header().Set("HX-Retarget", "body")
	Allergies(w, req)
}

templ T_Allergies(pat *r4.Patient, patEverything *r4Client.ResourceGroup) {
	@Base_Patient(pat, patEverything, TabAllergies) {
		<div id="allergy-page" class="color-color3" style="margin: 4px; padding: 4px;">
			{ children... }
			<div style="display: flex; align-items: center; gap: 1em;">
				<h3>Allergies</h3>
				<dialog
					potato-drag
					class="color-color3 shadow"
					style="position: absolute; top: 20vh; height: 50vh; right: 2vw; width: 70vw; cursor: move; padding: 4px; border-width: 2px; border-style: solid; border-radius: 8px; z-index: 99;"
				>
					@T_AllergyForm(*pat.Id, nil)
				</dialog>
				<button onclick="this.previousElementSibling.show()">
					Add New Allergy
				</button>
			</div>
			<table>
				<thead>
					<th>Allergy</th>
					<th>Date</th>
					<th>Notes</th>
					<th></th>
				</thead>
				<tbody>
					for _, allergy := range patEverything.AllergyIntolerances {
						<tr>
							<td>{ allergy.Code.String() }</td>
							<td>
								if allergy.OnsetDateTime != nil {
									*allergy.onsetDateTime
								}
							</td>
							<td>
								if len(allergy.Note) != 0 {
									<div style="width:200px; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;">{ allergy.Note[0].Text }</div>
								}
							</td>
							<td>
								<dialog
									potato-drag
									class="color-color3 shadow"
									style="position: absolute; top: 20vh; height: 50vh; right: 2vw; width: 70vw; cursor: move; padding: 4px; border-width: 2px; border-style: solid; border-radius: 8px; z-index: 99;"
								>
									@T_AllergyForm(*pat.Id, allergy)
								</dialog>
								<button onclick="this.previousElementSibling.show()">
									Edit
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}

var s1 = "testing"
var s2 = "hives"
var s3 = "hives"
var s4 = "testing"
var s5 = "mosquito"
var s6 = "mosquito"
var test = []r4.Coding{
	{
		System:  &s1,
		Code:    &s2,
		Display: &s3,
	},
	{
		System:  &s4,
		Code:    &s5,
		Display: &s6,
	},
}

templ T_AllergyForm(patId string, allergy *r4.AllergyIntolerance) {
	<form
		style="display: flex; flex-direction: column; height: 100%;"
		if allergy == nil || allergy.Id == nil {
			hx-post={ "/patient/" + patId + "/allergies/create/" }
		} else {
			hx-post={ "/patient/" + patId + "/allergies/update/" + *allergy.Id }
		}
		hx-ext="form-json"
		hx-push-url="false"
		hx-swap="outerHTML"
	>
		<header style="display:flex; justify-content:space-between; align-items:center; margin: 0px; padding: 0px;">
			<span>
				if allergy == nil {
					Add New Allergy
				} else {
					{ allergy.Code.String() }
				}
			</span>
			<button type="button" onclick="this.closest('dialog').close()">âœ•</button>
		</header>
		<div>
			<hr class="color-color3"/>
		</div>
		<section style="overflow: auto; display:flex; flex-direction:column; flex: 1">
			<label>
				Allergy: 
				@allergy.T_Code(test, "")
			</label>
			<label style="display: flex; flex-direction: row">
				<div>Reactions:</div>
				<div style="display: flex; flex-direction: column">
				@allergy.T_ReactionManifestation(0, 0, test, "")
				@allergy.T_ReactionManifestation(1, 0, test, "")
				@allergy.T_ReactionManifestation(2, 0, test, "")
				</div>
			</label>
			<label>
				Reaction Type: 
				@allergy.T_Type("")
			</label>
			<label>
				Severity: 
				@allergy.T_Criticality("")
			</label>
			<label>
				Onset: 
				@allergy.T_OnsetDateTime("")
			</label>
						<label>
				Comments: 
				@allergy.T_Note(0, "")
			</label>
		</section>
		<div>
			<hr class="color-color3"/>
		</div>
		<footer style="display:flex; margin: 0px; padding: 0px;">
			<button type="submit">Save Changes</button>
			<button type="reset" onclick="this.closest('dialog').close()">
				Close
			</button>
			if allergy != nil && allergy.Id != nil {
				<button type="button" hx-post={ "/patient/" + patId + "/allergies/delete/" + *allergy.Id } hx-target="body" hx-swap="outerHTML">
					Delete
				</button>
			}
		</footer>
	</form>
}