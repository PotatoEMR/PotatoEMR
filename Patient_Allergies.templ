package main

import (
	"errors"
	r4 "github.com/PotatoEMR/simple-fhir-client/r4"
	r4Client "github.com/PotatoEMR/simple-fhir-client/r4Client"

	"encoding/json"
	"fmt"
	"net/http"
)

func patient_Allergies(w http.ResponseWriter, req *http.Request) {
	patId := req.PathValue("patId")
	patEverything, err := client.PatientEverythingGrouped(patId)

	if err != nil {
		ErrorMsg(err).Render(req.Context(), w)
	} else if len(patEverything.Patients) != 1 {
		ErrorMsg(errors.New("Patient id "+patId+" not found on server "+client.BaseUrl)).Render(req.Context(), w)
	} else {
		pat := patEverything.Patients[0]
		T_Allergies(pat, patEverything).Render(req.Context(), w)
	}
}

func patient_AllergiesCreate(w http.ResponseWriter, req *http.Request) {
	var data r4.AllergyIntolerance
	if err := json.NewDecoder(req.Body).Decode(&data); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer req.Body.Close()

	patId := req.PathValue("patId")
	t1, _ := json.Marshal(data)
	fmt.Println(string(t1))
	data.Patient = r4.Patient{Id: &patId}.ToRef()
	t1, _ = json.Marshal(data)
	fmt.Println(string(t1))

	_, err := client.CreateAllergyIntolerance(&data)
	fmt.Println("created?")
	if err != nil {
		fmt.Println("error creating allergy", err)
	}

	w.Header().Set("HX-Retarget", "body")
	patient_Allergies(w, req)
}

func patient_AllergiesUpdate(w http.ResponseWriter, req *http.Request) {
	allergyId := req.PathValue("allergyId")
	a, _ := client.ReadAllergyIntolerance(allergyId)

	var data r4.AllergyIntolerance
	if err := json.NewDecoder(req.Body).Decode(&data); err != nil {
		fmt.Println("where error?", err.Error())
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer req.Body.Close()

	a.Type = data.Type
	a.Code = data.Code
	a.OnsetDateTime = data.OnsetDateTime
	a.Reaction = []r4.AllergyIntoleranceReaction{}
	for _, v := range data.Reaction {
		a.Reaction = append(a.Reaction, v)
		fmt.Println(*v.Manifestation[0].Coding[0].Display)
	}
	a.Criticality = data.Criticality
	a.Note = []r4.Annotation{data.Note[0]}

	_, err := client.UpdateAllergyIntolerance(a)
	fmt.Println("update error", err)
	w.Header().Set("HX-Retarget", "body")
	patient_Allergies(w, req)
}

func patient_AllergiesDelete(w http.ResponseWriter, req *http.Request) {
	allergyId := req.PathValue("allergyId")
	client.DeleteAllergyIntoleranceById(allergyId)
	w.Header().Set("HX-Retarget", "body")
	patient_Allergies(w, req)
}

templ T_Allergies(pat *r4.Patient, patEverything *r4Client.ResourceGroup) {
	@patient_Base_Nav(pat, patEverything, TabAllergies) {
		<div id="allergy-page" class="color-color3" style="margin: 4px; padding: 4px;">
			{ children... }
			<div style="display: flex; align-items: center; gap: 1em;">
				<h3>Allergies</h3>
				<dialog
					class="color-color3 shadow"
					style="position: absolute; top: 20vh; height: 50vh; right: 2vw; width: 70vw; padding: 4px; border-width: 2px; border-style: solid; border-radius: 8px; z-index: 99;"
				>
					@T_AllergyForm(*pat.Id, nil)
				</dialog>
				<button onclick="this.previousElementSibling.show()">
					Add New Allergy
				</button>
			</div>
			<table>
				<thead>
					<th>Allergy</th>
					<th>Date</th>
					<th>Notes</th>
					<th></th>
				</thead>
				<tbody>
					for _, allergy := range patEverything.AllergyIntolerances {
						<tr>
							<td>{ allergy.Code.String() }</td>
							<td>
								if allergy.OnsetDateTime != nil {
									{ (*allergy.OnsetDateTime).Format("2006/01/02 15:04") }
								}
							</td>
							<td>
								if len(allergy.Note) != 0 {
									<div style="width:200px; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;">{ allergy.Note[0].Text }</div>
								}
							</td>
							<td>
								<dialog
									class="color-color3 shadow"
									style="position: absolute; top: 20vh; height: 50vh; right: 2vw; width: 70vw; padding: 4px; border-width: 2px; border-style: solid; border-radius: 8px; z-index: 99;"
								>
									@T_AllergyForm(*pat.Id, allergy)
								</dialog>
								<button onclick="this.previousElementSibling.show()">
									Edit
								</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}

var s1 = "testing"
var s2 = "hives"
var s3 = "hives"
var s4 = "testing"
var s5 = "mosquito"
var s6 = "mosquito"
var test = []r4.Coding{
	{
		System:  &s1,
		Code:    &s2,
		Display: &s3,
	},
	{
		System:  &s4,
		Code:    &s5,
		Display: &s6,
	},
}

templ T_AllergyForm(patId string, allergy *r4.AllergyIntolerance) {
	{{
	formId := "allergy_new"
	if allergy != nil && allergy.Id != nil {
		formId = "allergy_" + *allergy.Id
	}
	}}
	<form
		id={ formId }
		style="display: flex; flex-direction: column; height: 100%;"
		if allergy == nil || allergy.Id == nil {
			hx-post={ "/patient/" + patId + "/allergies/create/" }
		} else {
			hx-post={ "/patient/" + patId + "/allergies/update/" + *allergy.Id }
		}
		hx-ext="form-json"
		hx-push-url="false"
		hx-swap="outerHTML"
		hx-indicator={ "#" + formId }
		class="htmx-indicator"
	>
		<header
			potato-drag
			style="cursor: move; display:flex; justify-content:space-between; align-items:center; margin: 0px; padding: 0px;"
		>
			<span>
				if allergy == nil {
					Add New Allergy
				} else {
					{ allergy.Code.String() }
				}
			</span>
			<button type="button" onclick="this.closest('dialog').close()">âœ•</button>
		</header>
		<div potato-drag style="cursor: move">
			<hr class="color-color3"/>
		</div>
		<section style="flex: 1; overflow: auto; display: flex; flex-wrap: wrap">
			<div style="width: 360px; display:flex; flex-direction:column; gap: 3px;">
				<div>
					<label for={ formId + "code" } style="display: inline-block; width: 120px;">Allergy: </label>
					@allergy.T_Code(test, templ.Attributes{"style": "display: inline-block; width: 220px;", "id": formId + "code"})
				</div>
				<div style="display: flex; flex-direction: row">
					<label for={ formId + "reaction" } style="width: 120px;">Reactions: </label>
					<div style="display: flex; flex-direction: column">
						@allergy.T_ReactionManifestation(0, 0, test, templ.Attributes{"style": "width: 220px", "id": formId + "reaction"})
						@allergy.T_ReactionManifestation(1, 0, test, templ.Attributes{"style": "width: 220px"})
						@allergy.T_ReactionManifestation(2, 0, test, templ.Attributes{"style": "width: 220px"})
					</div>
				</div>
				<div>
					<label for={ formId + "type" } style="display: inline-block; width: 120px;">Reaction Type:</label>
					@allergy.T_Type(templ.Attributes{"style": "display: inline-block; width: 220px;", "id": formId + "type"})
				</div>
				<div>
					<label for={ formId + "criticality" } style="display: inline-block; width: 120px;">Severity:</label>
					@allergy.T_Criticality(templ.Attributes{"style": "display: inline-block; width: 220px;", "id": formId + "criticality"})
				</div>
				<div>
					<label for={ formId + "onset" } style="display: inline-block; width: 120px;">Onset:</label>
					@allergy.T_OnsetDateTime(templ.Attributes{"style": "display: inline-block; width: 220px;", "id": formId + "onset"})
				</div>
			</div>
			<div style="display: flex; flex-direction: column; flex: 1">
				<label for={ formId + "note" } style="display: inline-block; width: 120px;">Comments:</label>
				@allergy.T_Note(0, templ.Attributes{"style": "width: 300px; height: 150px;", "id": formId + "note"})
			</div>
		</section>
		<div>
			<hr class="color-color3"/>
		</div>
		<footer style="display:flex; margin: 0px; padding: 0px;">
			<button type="submit">Save Changes</button>
			<button type="reset" onclick="this.closest('dialog').close()">
				Close
			</button>
			if allergy != nil && allergy.Id != nil {
				<button type="button" hx-post={ "/patient/" + patId + "/allergies/delete/" + *allergy.Id } hx-target="body" hx-swap="outerHTML">
					Delete
				</button>
			}
		</footer>
	</form>
}
