package main

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/PotatoEMR/simple-fhir-client/r4"
	"net/http"
)

func my_RegisterPatient(w http.ResponseWriter, req *http.Request) {
	T_RegisterPatient().Render(req.Context(), w)
}

func my_RegisterPatientCreate(w http.ResponseWriter, req *http.Request) {
	fmt.Println("RegisterPatientCreate 1")
	var patientPOST r4.Patient
	if err := json.NewDecoder(req.Body).Decode(&patientPOST); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer req.Body.Close()
	createdPat, err := client.CreatePatient(&patientPOST)
	if err != nil {
		ErrorMsg(err).Render(req.Context(), w)
		return
	}

	if createdPat.Id == nil {
		ErrorMsg(errors.New("registered patient on the server ("+client.BaseUrl+") but it did not assign the patient an id")).Render(req.Context(), w)
		return
	}

	patIdpatient_Overview(*createdPat.Id, w, req)
}

templ T_RegisterPatient() {
	@my_Base_Nav() {
		{{ var pat r4.Patient }}
		<h3 style="margin: 4px;">Register New Patient</h3>
		<form
			style="margin: 4px;"
			hx-post={ post_registerPatient }
			hx-target="body"
			hx-ext="form-json"
			hx-push-url="false"
			hx-swap="outerHTML"
			hx-indicator="#register_patient_form"
			id="register_patient_form"
			class="htmx-indicator"
		>
			// max-width: 1200px; display: grid; grid-template-columns: repeat(auto-fit, 400px); gap:4px;
			<div>
				<label for="birthdate" style="display: inline-block; width: 200px;">Birthday: </label>
				@pat.T_BirthDate(templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "birthdate"})
			</div>
			<div>
				<label for="gender" style="display: inline-block; width: 200px;">Gender: </label>
				@pat.T_Gender(templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "gender"})
			</div>
			<p>race</p>
			<p>ethnicity</p>
			<div>
				<label for="telecom" style="display: inline-block; width: 200px;">Patient Phone Number: </label>
				@pat.T_Telecom(0, templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "telecom"})
			</div>
			<div>
				<label for="contact" style="display: inline-block; width: 200px;">Contact Phone Number: </label>
				@pat.T_ContactTelecom(0, 0, templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "contact"})
			</div>
			<button
				type="submit"
			>Create Patient</button>
		</form>
	}
}
