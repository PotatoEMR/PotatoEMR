package main

import (
	"encoding/json"
	"fmt"
	"github.com/PotatoEMR/PotatoEMR/utils"
	"github.com/PotatoEMR/simple-fhir-client/r4"
	"net/http"
)

func my_RegisterPatient(w http.ResponseWriter, req *http.Request) {
	T_RegisterPatient().Render(req.Context(), w)
}

func my_RegisterPatientCreate(w http.ResponseWriter, req *http.Request) {
	fmt.Println("RegisterPatientCreate 1")
	var patientPOST r4.Patient
	if err := json.NewDecoder(req.Body).Decode(&patientPOST); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer req.Body.Close()
	createdPat, err := client.CreatePatient(&patientPOST)
	if err != nil {
		ErrorMsg(err).Render(req.Context(), w)
		return
	}

	T_RegisterPatientCreated(*createdPat).Render(req.Context(), w)
}

templ T_RegisterPatient() {
	@my_Base_Nav() {
		{{ var pat r4.Patient }}
		<h3 style="margin: 4px;">Register New Patient</h3>
		<form
			style="margin: 4px;"
			hx-post={ "/registerpatient" }
			hx-target="body"
			hx-ext="form-json"
			hx-push-url="false"
			hx-swap="outerHTML"
			hx-indicator="#register_patient_form"
			id="register_patient_form"
			class="htmx-indicator"
		>
			// max-width: 1200px; display: grid; grid-template-columns: repeat(auto-fit, 400px); gap:4px;
			<div>
				<label for="birthdate" style="display: inline-block; width: 200px;">Birthday: </label>
				@pat.T_BirthDate(templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "birthdate"})
			</div>
			<div>
				<label for="gender" style="display: inline-block; width: 200px;">Gender: </label>
				@pat.T_Gender(templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "gender"})
			</div>
			<p>race</p>
			<p>ethnicity</p>
			<div>
				<label for="telecom" style="display: inline-block; width: 200px;">Patient Phone Number: </label>
				@pat.T_Telecom(0, templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "telecom"})
			</div>
			<div>
				<label for="contact" style="display: inline-block; width: 200px;">Contact Phone Number: </label>
				@pat.T_ContactTelecom(0, 0, templ.Attributes{"style": "display: inline-block; width: 220px;", "id": "contact"})
			</div>
			<button
				type="submit"
			>Create Patient</button>
		</form>
	}
}

templ T_RegisterPatientCreated(pat r4.Patient) {
	@my_Base_Nav() {
		<h3 style="margin: 4px;">Patient { *pat.Id } created</h3>
		<a href={ "/patient/" + *pat.Id }>
			<div class="color-color3-hover" style="width: fit-content; margin: auto;">
				{{ photoSrc := utils.GetPatientPhotoSrc(&pat) }}
				if photoSrc == nil {
					<svg width="150px" height="150px" viewBox="0 0 150 150" alt="Patient Photo" style="margin: auto; display: block; border-radius: 5px;">
						<path fill="#ccc" d="M 104.68731,56.689353 C 102.19435,80.640493 93.104981,97.26875 74.372196,97.26875 55.639402,97.26875 46.988823,82.308034 44.057005,57.289941 41.623314,34.938838 55.639402,15.800152 74.372196,15.800152 c 18.732785,0 32.451944,18.493971 30.315114,40.889201 z"></path>
						<path fill="#ccc" d="M 92.5675 89.6048 C 90.79484 93.47893 89.39893 102.4504 94.86478 106.9039 C 103.9375 114.2963 106.7064 116.4723 118.3117 118.9462 C 144.0432 124.4314 141.6492 138.1543 146.5244 149.2206 L 4.268444 149.1023 C 8.472223 138.6518 6.505799 124.7812 32.40051 118.387 C 41.80992 116.0635 45.66513 113.8823 53.58659 107.0158 C 58.52744 102.7329 57.52583 93.99267 56.43084 89.26926 C 52.49275 88.83011 94.1739 88.14054 92.5675 89.6048 z"></path>
					</svg>
				} else {
					<img src={ *photoSrc } alt="Patient Photo" style="width: 150px; height: 150px; margin: auto; display: block; object-fit: contain; border-radius: 5px;"/>
				}
				<p style="text-align: center;">{ pat.String() }</p>
			</div>
		</a>
	}
}
